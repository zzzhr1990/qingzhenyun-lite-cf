/////////////////////////////////////////////////////////////////////////////
// Name:        videopreviewframe.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     07/09/2018 14:48:49
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 07/09/2018 14:48:49

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes



#ifdef __WXGTK__
#include <gdk/gdkx.h>
#include <gtk/gtk.h>
#include <wx/gtk/win_gtk.h>
#define GET_XID(window) GDK_WINDOW_XWINDOW(GTK_PIZZA(window->m_wxwindow)->bin_window)
#endif
#include "videopreviewframe.h"
#include "../../model/remote_file_model.h"
#include "../../model/user_model.h"
#include "../../util/common_util.h"
////@begin XPM images
////@end XPM images


/*
 * VideoPreviewFrame type definition
 */

IMPLEMENT_DYNAMIC_CLASS( VideoPreviewFrame, wxDialog )


/*
 * VideoPreviewFrame event table definition
 */

BEGIN_EVENT_TABLE( VideoPreviewFrame, wxDialog )

////@begin VideoPreviewFrame event table entries
////@end VideoPreviewFrame event table entries

END_EVENT_TABLE()


/*
 * VideoPreviewFrame constructors
 */

VideoPreviewFrame::VideoPreviewFrame()
{
    Init();
}

VideoPreviewFrame::VideoPreviewFrame(utility::string_t path, wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
	this->path = path;
	this->Bind(wxEVT_THREAD, &VideoPreviewFrame::OnThreadEvent, this);
	this->Bind(wxEVT_CLOSE_WINDOW, &VideoPreviewFrame::OnCloseWindow, this);
}

void VideoPreviewFrame::OnThreadEvent(wxThreadEvent &event) {
	// D
	switch (event.GetInt()) {
	case USER_PREVIEW_INFO:
	{
		auto payload = event.GetPayload<ResponseEntity>();
		//RefreshListData(payload);
		if (payload.success) {
			//wxMessageBox(_("Success load preview file."), _("Load Preview Success"));
			
			if (payload.result.has_field(U("preview"))) {
				auto preview = payload.result.at(U("preview")).as_array();
				if (preview.size() > 0) {
					// do preview
					PlayPreview(preview);
				}
				else {
					wxMessageBox(_("Preview file is empty."), _("Load Preview Error"));
					this->Close();
				}
			}
		}
		else {
			wxMessageBox(_("Cannot load preview file."), _("Load Preview Error"));
			this->Close();
		}
		break;
	}
	/*
	case USER_REMOTE_DIRECTORY_CREATE:
	{
		auto & fileModel = RemoteFileModel::Instance();
		fileModel.GetPage(this);
		break;
	}
	*/
	
	default:
		event.Skip();
	}
}

void VideoPreviewFrame::OnCloseWindow(wxCloseEvent & event)
{
	event.Skip();
	if (mp == NULL) {
		return;
	}
	if (mp.isPlaying()) {
		mp.stop();
	}
}

void VideoPreviewFrame::PlayPreview(const web::json::array& array) {
	// create 
	int clear = 0;
	utility::string_t t;
	for (const auto& i : array) {
		auto c = i.at(U("clear")).as_integer();
		if (c > clear) {
			t = i.at(U("url")).as_string();
			clear = c;
		}
	}
	if (clear > 0) {
		auto url = t.append(U("?token=")).append(UserModel::Instance().GetToken());
		std::string xx = utility::conversions::to_utf8string(url);
		instance = VLC::Instance(0, nullptr);
		media = VLC::Media(instance, xx, VLC::Media::FromLocation);
		mp = VLC::MediaPlayer(media);
		mp.setHwnd(playerWidget->GetHandle());
		
		//CopyTextToClipboard(xx);
		
		//mp.setMedia(media);
		mp.play();
	}
	else {
		wxMessageBox(_("No video stream found."), _("Load Preview Error"));
		this->Close();
	}


	

}

void VideoPreviewFrame::SetPath(const utility::string_t& path) {
	this->path = path;
}
void VideoPreviewFrame::GetVideoStream() {
	RemoteFileModel::Instance().GetPreviewInfo(this, path);
}

/*
 * VideoPreviewFrame creator
 */

bool VideoPreviewFrame::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin VideoPreviewFrame creation
    SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY|wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    Centre();
////@end VideoPreviewFrame creation
    return true;
}


/*
 * VideoPreviewFrame destructor
 */

VideoPreviewFrame::~VideoPreviewFrame()
{
////@begin VideoPreviewFrame destruction
	//delete media;
	//delete player;
	//delete instance;
	//player.med
	//player.d;
////@end VideoPreviewFrame destruction
}


/*
 * Member initialisation
 */

void VideoPreviewFrame::Init()
{
////@begin VideoPreviewFrame member initialisation
////@end VideoPreviewFrame member initialisation
}


/*
 * Control creation for VideoPreviewFrame
 */

void VideoPreviewFrame::CreateControls()
{    
////@begin VideoPreviewFrame content construction
    // Generated by DialogBlocks, 08/09/2018 00:01:21 (unregistered)

    VideoPreviewFrame* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    // wxMediaCtrl* itemMediaCtrl1 = new wxMediaCtrl( itemDialog1, ID_MEDIACTRL, wxEmptyString, wxDefaultPosition, wxSize(100, 100), wxNO_BORDER );
	playerWidget = new wxWindow(this, wxID_ANY, wxDefaultPosition, wxSize(100, 100), wxNO_BORDER);
	playerWidget->SetBackgroundColour(wxColour(wxT("black")));
    itemBoxSizer2->Add(playerWidget, 1, wxGROW, 5);

    wxBoxSizer* itemBoxSizer1 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer1, 0, wxGROW, 5);

    wxButton* itemButton2 = new wxButton( itemDialog1, wxID_ANY, _("PLAY"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer1->Add(itemButton2, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText3 = new wxStaticText( itemDialog1, wxID_STATIC, _("00:00:00"), wxDefaultPosition, wxSize(60, -1), wxALIGN_CENTRE );
    itemBoxSizer1->Add(itemStaticText3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxSlider* itemSlider4 = new wxSlider( itemDialog1, wxID_ANY, 0, 0, 100, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL );
    itemBoxSizer1->Add(itemSlider4, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText5 = new wxStaticText( itemDialog1, wxID_STATIC, _("00:00:00"), wxDefaultPosition, wxSize(60, -1), wxALIGN_CENTRE );
    itemBoxSizer1->Add(itemStaticText5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText6 = new wxStaticText( itemDialog1, wxID_STATIC, _("vol"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer1->Add(itemStaticText6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxSlider* itemSlider7 = new wxSlider( itemDialog1, wxID_ANY, 0, 0, 100, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL );
    itemBoxSizer1->Add(itemSlider7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

	
	//libvlc_event_attach(vlcEventManager, libvlc_MediaPlayerEndReached, ::OnEndReached_VLC, NULL);
	//libvlc_event_attach(vlcEventManager, libvlc_MediaPlayerPositionChanged, ::OnPositionChanged_VLC, NULL);
	//libvlc_event_attach(vlcEventManager, libvlc_Me, ::OnPositionChanged_VLC, NULL);
	InitVLC();
////@end VideoPreviewFrame content construction
}

//void VideoPreviewFrame::OnPositionChanged_VLC(const libvlc_event_t *event, void *data) {
	//wxCommandEvent evt(vlcEVT_POS, wxID_ANY);
	//mainWindow->GetEventHandler()->AddPendingEvent(evt);
	//event.
//}

//void VideoPreviewFrame::OnEndReached_VLC(const libvlc_event_t *event, void *data) {
	//wxCommandEvent evt(vlcEVT_END, wxID_ANY);
	//mainWindow->GetEventHandler()->AddPendingEvent(evt);
//}

void VideoPreviewFrame::InitVLC() {
#ifdef __WXGTK__
	libvlc_media_player_set_xwindow(media_player, GET_XID(this->playerWidget));
#else
	//libvlc_media_player_set_hwnd(mediaPlayer, this->playerWidget->GetHandle());
	//libvlc
	//libvlc_media_player_set_w
#endif
}

/*
 * Should we show tooltips?
 */


bool VideoPreviewFrame::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap VideoPreviewFrame::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin VideoPreviewFrame bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end VideoPreviewFrame bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon VideoPreviewFrame::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin VideoPreviewFrame icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end VideoPreviewFrame icon retrieval
}
