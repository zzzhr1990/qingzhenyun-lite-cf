/////////////////////////////////////////////////////////////////////////////
// Name:        videopreviewframe.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     07/09/2018 14:48:49
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 07/09/2018 14:48:49

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "videopreviewframe.h"
#include "../../model/remote_file_model.h"
#include "../../model/user_model.h"
////@begin XPM images
////@end XPM images


/*
 * VideoPreviewFrame type definition
 */

IMPLEMENT_DYNAMIC_CLASS(VideoPreviewFrame, wxDialog)


/*
 * VideoPreviewFrame event table definition
 */

	BEGIN_EVENT_TABLE(VideoPreviewFrame, wxDialog)

	////@begin VideoPreviewFrame event table entries
	EVT_CLOSE(VideoPreviewFrame::OnCloseWindow)

	////@end VideoPreviewFrame event table entries

	END_EVENT_TABLE()


	/*
	 * VideoPreviewFrame constructors
	 */

	VideoPreviewFrame::VideoPreviewFrame()
{
	Init();
}

VideoPreviewFrame::VideoPreviewFrame(const utility::string_t &path, wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style)
{
	Init();
	Create(parent, id, caption, pos, size, style);
	
	vlc_inst = libvlc_new(0, NULL);
	media_player = libvlc_media_player_new(vlc_inst);
	vlc_evt_man = libvlc_media_player_event_manager(media_player);
	this->Bind(wxEVT_THREAD, &VideoPreviewFrame::OnThreadEvent, this);
	RemoteFileModel::Instance().GetPreviewInfo(this, path);
}


/*
 * VideoPreviewFrame creator
 */

bool VideoPreviewFrame::Create(wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style)
{
	////@begin VideoPreviewFrame creation
	SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY | wxWS_EX_BLOCK_EVENTS);
	wxDialog::Create(parent, id, caption, pos, size, style);

	CreateControls();
	Centre();
	////@end VideoPreviewFrame creation
	return true;
}


/*
 * VideoPreviewFrame destructor
 */

VideoPreviewFrame::~VideoPreviewFrame()
{
	////@begin VideoPreviewFrame destruction
	libvlc_media_player_release(media_player);
	libvlc_release(vlc_inst);
	////@end VideoPreviewFrame destruction
}


/*
 * Member initialisation
 */

void VideoPreviewFrame::Init()
{
	////@begin VideoPreviewFrame member initialisation
	////@end VideoPreviewFrame member initialisation
}


/*
 * Control creation for VideoPreviewFrame
 */

void VideoPreviewFrame::CreateControls()
{
	////@begin VideoPreviewFrame content construction
		// Generated by DialogBlocks, 25/09/2018 23:47:36 (unregistered)

	VideoPreviewFrame* itemDialog1 = this;

	wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
	itemDialog1->SetSizer(itemBoxSizer2);


	//wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
	//itemPanel1->SetSizer(itemBoxSizer3);

	wxPanel* itemPanel1 = new wxPanel(itemDialog1, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER | wxTAB_TRAVERSAL);
	itemPanel1->SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY);
	itemPanel1->SetName(wxT("playerPanel"));
	itemPanel1->SetBackgroundColour(wxColour(wxT("black")));
	itemBoxSizer2->Add(itemPanel1, 1, wxGROW, 5);
	wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
	//itemBoxSizer3->SetBackgroundColour(wxColour(wxT("black")));
	itemPanel1->SetSizer(itemBoxSizer3);
	playerWidget = new wxWindow(this, wxID_ANY, wxDefaultPosition, wxSize(100, 100), wxNO_BORDER);
	playerWidget->SetBackgroundColour(wxColour(wxT("black")));
	playerWidget->Disable();
	//wxMediaCtrl* itemMediaCtrl4 = new wxMediaCtrl(itemPanel1, wxID_ANY, wxEmptyString, wxDefaultPosition, wxSize(100, 100), wxNO_BORDER);
	itemBoxSizer3->Add(playerWidget, 1, wxGROW, 5);

	wxBoxSizer* itemBoxSizer1 = new wxBoxSizer(wxHORIZONTAL);
	itemBoxSizer2->Add(itemBoxSizer1, 0, wxGROW, 5);

	wxStaticText* itemStaticText3 = new wxStaticText(itemDialog1, wxID_STATIC, _("00:00:00"), wxDefaultPosition, wxSize(60, -1), wxALIGN_CENTRE);
	itemBoxSizer1->Add(itemStaticText3, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);

	wxSlider* itemSlider4 = new wxSlider(itemDialog1, wxID_ANY, 0, 0, 100, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL);
	itemBoxSizer1->Add(itemSlider4, 1, wxALIGN_CENTER_VERTICAL | wxALL, 5);

	wxStaticText* itemStaticText1 = new wxStaticText(itemDialog1, wxID_STATIC, _("00:00:00"), wxDefaultPosition, wxSize(60, -1), wxALIGN_CENTRE);
	itemBoxSizer1->Add(itemStaticText1, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);

	wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxHORIZONTAL);
	itemBoxSizer2->Add(itemBoxSizer4, 0, wxGROW, 5);

	wxButton* itemButton2 = new wxButton(itemDialog1, wxID_ANY, _("PLAY"), wxDefaultPosition, wxDefaultSize, 0);
	itemBoxSizer4->Add(itemButton2, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);

	wxArrayString itemChoice5Strings;
	wxChoice* itemChoice5 = new wxChoice(itemDialog1, wxID_ANY, wxDefaultPosition, wxDefaultSize, itemChoice5Strings, 0);
	itemBoxSizer4->Add(itemChoice5, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);

	wxButton* itemButton1 = new wxButton(itemDialog1, wxID_ANY, _("Manage"), wxDefaultPosition, wxDefaultSize, 0);
	itemBoxSizer4->Add(itemButton1, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);

	wxArrayString itemChoice7Strings;
	wxChoice* itemChoice7 = new wxChoice(itemDialog1, wxID_ANY, wxDefaultPosition, wxSize(80, -1), itemChoice7Strings, 0);
	itemBoxSizer4->Add(itemChoice7, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);

	wxSlider* itemSlider8 = new wxSlider(itemDialog1, wxID_ANY, 0, 0, 100, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL);
	itemBoxSizer4->Add(itemSlider8, 1, wxALIGN_CENTER_VERTICAL | wxALL, 5);

	wxButton* itemButton9 = new wxButton(itemDialog1, wxID_ANY, _("FullScreen"), wxDefaultPosition, wxDefaultSize, 0);
	itemBoxSizer4->Add(itemButton9, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);

	////@end VideoPreviewFrame content construction
}


/*
 * Should we show tooltips?
 */

bool VideoPreviewFrame::ShowToolTips()
{
	return true;
}

void VideoPreviewFrame::OnThreadEvent(wxThreadEvent & event)
{
	switch (event.GetInt()) {
	case USER_PREVIEW_INFO:
	{
		auto payload = event.GetPayload<ResponseEntity>();
		//RefreshListData(payload);
		if (payload.success) {
			//wxMessageBox(_("Success load preview file."), _("Load Preview Success"));

			if (payload.result.has_field(U("preview"))) {
				auto preview = payload.result.at(U("preview")).as_array();
				if (preview.size() > 0) {
					// do preview
					PlayPreview(preview);
				}
				else {
					wxMessageBox(_("Preview file is empty."), _("Load Preview Error"));
					this->Close();
				}
			}
		}
		else {
			wxMessageBox(_("Cannot load preview file."), _("Load Preview Error"));
			this->Close();
		}
		break;
	}
	default:
		event.Skip();
	}
}

void VideoPreviewFrame::PlayPreview(const web::json::array & array)
{
	int clear = 0;
	utility::string_t t;
	for (const auto& i : array) {
		auto c = i.at(U("clear")).as_integer();
		if (c > clear) {
			t = i.at(U("url")).as_string();
			clear = c;
		}
	}
	if (clear > 0) {
		auto url = t.append(U("?token=")).append(UserModel::Instance().GetToken());
		const std::string& playUrl = utility::conversions::to_utf8string(url);
		auto system = wxPlatformInfo::Get().GetOperatingSystemId();
		if (system & wxOS_WINDOWS) {
			libvlc_media_player_set_hwnd(media_player, playerWidget->GetHandle());
		}
		if (system & wxOS_MAC) {
			libvlc_media_player_set_nsobject(media_player, playerWidget->GetHandle());
		}
		
		auto media = libvlc_media_new_location(vlc_inst, playUrl.c_str());
		libvlc_media_player_set_media(media_player, media);
		libvlc_media_player_play(media_player);
		libvlc_media_release(media);
		//instance =
		
	}
	else {
		wxMessageBox(_("No video stream found."), _("Load Preview Error"));
		this->Close();
	}
}

/*
 * Get bitmap resources
 */

wxBitmap VideoPreviewFrame::GetBitmapResource(const wxString& name)
{
	// Bitmap retrieval
////@begin VideoPreviewFrame bitmap retrieval
	wxUnusedVar(name);
	return wxNullBitmap;
	////@end VideoPreviewFrame bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon VideoPreviewFrame::GetIconResource(const wxString& name)
{
	// Icon retrieval
////@begin VideoPreviewFrame icon retrieval
	wxUnusedVar(name);
	return wxNullIcon;
	////@end VideoPreviewFrame icon retrieval
}


/*
 * wxEVT_CLOSE_WINDOW event handler for ID_VIDEOPREVIEWFRAME
 */

void VideoPreviewFrame::OnCloseWindow(wxCloseEvent& event)
{
	////@begin wxEVT_CLOSE_WINDOW event handler for ID_VIDEOPREVIEWFRAME in VideoPreviewFrame.
		// Before editing this code, remove the block markers.
	//wxMessageBox(_(""));
	event.Skip();
	////@end wxEVT_CLOSE_WINDOW event handler for ID_VIDEOPREVIEWFRAME in VideoPreviewFrame. 
}


/*
 * wxEVT_SCROLL_PAGEUP event handler for ID_SLIDER
 */


