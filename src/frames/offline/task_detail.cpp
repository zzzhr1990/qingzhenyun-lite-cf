/////////////////////////////////////////////////////////////////////////////
// Name:        task_detail.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     08/09/2018 13:55:19
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 08/09/2018 13:55:19

// For compilers that support precompilation, includes "wx/wx.h".


////@begin includes
////@end includes

#include "task_detail.h"
#include "../../util/common_util.h"

////@begin XPM images
////@end XPM images


/*
 * TaskDetail type definition
 */

IMPLEMENT_DYNAMIC_CLASS( TaskDetail, wxDialog )


/*
 * TaskDetail event table definition
 */

BEGIN_EVENT_TABLE( TaskDetail, wxDialog )

////@begin TaskDetail event table entries
////@end TaskDetail event table entries

END_EVENT_TABLE()


/*
 * TaskDetail constructors
 */

TaskDetail::TaskDetail()
{
    Init();
}

TaskDetail::TaskDetail( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*
 * TaskDetail creator
 */

bool TaskDetail::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin TaskDetail creation
    SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY|wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    Centre();
////@end TaskDetail creation
    return true;
}


/*
 * TaskDetail destructor
 */

TaskDetail::~TaskDetail()
{
////@begin TaskDetail destruction
////@end TaskDetail destruction
}


/*
 * Member initialisation
 */

void TaskDetail::Init()
{
////@begin TaskDetail member initialisation
////@end TaskDetail member initialisation
}


/*
 * Control creation for TaskDetail
 */

void TaskDetail::CreateControls()
{    
////@begin TaskDetail content construction
    // Generated by DialogBlocks, 08/09/2018 14:18:40 (unregistered)

    TaskDetail* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer1 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer2->Add(itemBoxSizer1, 1, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer1->Add(itemBoxSizer3, 1, wxGROW|wxALL, 5);

    wxFlexGridSizer* itemFlexGridSizer4 = new wxFlexGridSizer(0, 2, 0, 0);
    itemBoxSizer3->Add(itemFlexGridSizer4, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText5 = new wxStaticText( itemDialog1, wxID_STATIC, _("Task name"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(itemStaticText5, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    taskNameTextCtrl = new wxTextCtrl( itemDialog1, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
	taskNameTextCtrl->SetEditable(false);
    itemFlexGridSizer4->Add(taskNameTextCtrl, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5);

	wxStaticText* TaskIditemStaticText = new wxStaticText( itemDialog1, wxID_STATIC, _("ID"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(TaskIditemStaticText, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    taskIdTextCtrl = new wxTextCtrl( itemDialog1, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
	taskIdTextCtrl->SetEditable(false);
    itemFlexGridSizer4->Add(taskIdTextCtrl, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText9 = new wxStaticText( itemDialog1, wxID_STATIC, _("Status"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(itemStaticText9, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    taskStatusStaticText = new wxStaticText( itemDialog1, wxID_STATIC, _("Unknown"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(taskStatusStaticText, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText11 = new wxStaticText( itemDialog1, wxID_STATIC, _("Progress"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(itemStaticText11, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    progressStaticText = new wxStaticText( itemDialog1, wxID_STATIC, _("0MB/0MB (100%)"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(progressStaticText, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText13 = new wxStaticText( itemDialog1, wxID_STATIC, _("Path"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(itemStaticText13, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    pathStaticText = new wxTextCtrl( itemDialog1, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(pathStaticText, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5);
	pathStaticText->SetEditable(false);

    wxStaticText* itemStaticText1 = new wxStaticText( itemDialog1, wxID_STATIC, _("Mime"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(itemStaticText1, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    mimeStaticText = new wxStaticText( itemDialog1, wxID_STATIC, _("Unknown"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(mimeStaticText, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    //wxStaticText* itemStaticText3 = new wxStaticText( itemDialog1, wxID_STATIC, _("Preview"), wxDefaultPosition, wxDefaultSize, 0 );
    //itemFlexGridSizer4->Add(itemStaticText3, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    //previewStaticText = new wxStaticText( itemDialog1, wxID_STATIC, _("No"), wxDefaultPosition, wxDefaultSize, 0 );
    //itemFlexGridSizer4->Add(previewStaticText, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemFlexGridSizer4->AddGrowableRow(0);
    itemFlexGridSizer4->AddGrowableCol(1);

    wxStaticLine* itemStaticLine15 = new wxStaticLine( itemDialog1, wxID_STATIC, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL );
    itemBoxSizer2->Add(itemStaticLine15, 0, wxGROW, 5);

    wxBoxSizer* itemBoxSizer16 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer16, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxButton* itemButton17 = new wxButton( itemDialog1, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer16->Add(itemButton17, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end TaskDetail content construction
}


/*
 * Should we show tooltips?
 */

bool TaskDetail::ShowToolTips()
{
    return true;
}

void TaskDetail::setView(const web::json::value& v)
{
	//
	if (v.has_field(U("taskId"))) {
		taskIdTextCtrl->SetValue(v.at(U("taskId")).as_string());
	}
	if (v.has_field(U("name"))) {
		taskNameTextCtrl->SetValue(v.at(U("name")).as_string());
	}
	if (v.has_field(U("filePath"))) {
		pathStaticText->SetValue(v.at(U("filePath")).as_string());
	}
	if (v.has_field(U("status"))) {
		//taskNameTextCtrl->SetValue(v.at(U("filePath")).as_string());
		auto status = v.at(U("status")).as_integer();
		switch (status)
		{
		case 100:
			taskStatusStaticText->SetLabel(_("Finished(100)"));
			break;
		case 90:
			taskStatusStaticText->SetLabel(_("Downloading and copying(90)"));
			break;
		default:
			taskStatusStaticText->SetLabel(wxString::Format(_("Unknown : %d"), status));
			if (status < 0) {
				taskStatusStaticText->SetLabel(wxString::Format(_("Error : %d - %d"), status, v.at(U("errorCode")).as_integer()));
			}
			break;
		}
	}
	if (v.has_field(_XPLATSTR("progress"))) {
		//pathStaticText->SetValue(v.at(U("filePath")).as_string());
		if (v.has_field(U("size")) && v.has_field(U("finishedSize"))) {
			
			progressStaticText->SetLabel(wxString::Format(_("%s/%s (%d%%)"),
				ConvertSizeToDisplay(v.at(U("finishedSize")).as_number().to_int64()),
				ConvertSizeToDisplay(v.at(U("size")).as_number().to_int64()), v.at(_XPLATSTR("progress")).as_integer()));
		}
		else {
			progressStaticText->SetLabel(wxString::Format(_("%d"), v.at(_XPLATSTR("progress")).as_integer()));
		}
	}
	if (v.has_field(U("mime"))) {
		mimeStaticText->SetLabel(v.at(U("mime")).as_string());
	}
}

/*
 * Get bitmap resources
 */

wxBitmap TaskDetail::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin TaskDetail bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end TaskDetail bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon TaskDetail::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin TaskDetail icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end TaskDetail icon retrieval
}
