cmake_minimum_required(VERSION 3.9.0)
if(MSVC)
    SET(CMAKE_TOOLCHAIN_FILE "G:/vcpkg/scripts/buildsystems/vcpkg.cmake")
endif()
SET(LINKING_TYPE "dynamic")
SET(PROJECT_NAME "qingzhenyun-lite")
project(${PROJECT_NAME})
set(default_build_type "Debug")

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(NOT CMAKE_BUILD_TYPE)
    message(STATUS "Setting build type to '${default_build_type}' as none was specified.")
    set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE
            STRING "Choose the type of build." FORCE)
endif()

if(MSVC)
    include(${CMAKE_SOURCE_DIR}/winmsvc.cmake)
else(MSVC)
    set(OPENSSL_ROOT_DIR "/usr/local/opt/openssl")
    find_package(wxWidgets REQUIRED COMPONENTS net core base)
    include(${wxWidgets_USE_FILE})
endif()
find_package(cpprestsdk REQUIRED cpprestsdk cpprest web pplx)
message(STATUS "CMAKE_BUILD_TYPE:${CMAKE_BUILD_TYPE}")
#file(GLOB helloworld_SRC
#    "*.h"
#    "*.cpp"
#)

# file(GLOB_RECURSE qingzhenyun_SRC  "*.h" "*.cpp")
file(GLOB_RECURSE SRCS ${CMAKE_CURRENT_SOURCE_DIR} *.cpp *.h)
FOREACH(LETTER ${SRCS})
    string(FIND ${LETTER} "cmake-" SEARCH_POS)
    if(SEARCH_POS EQUAL -1)
        list(APPEND FINAL_RES ${LETTER})
    endif()
ENDFOREACH()
if(MSVC)
    add_executable(${PROJECT_NAME} WIN32 ${FINAL_RES})
else(MSVC)
    add_executable(${PROJECT_NAME} ${FINAL_RES})
endif()
target_link_libraries(${PROJECT_NAME} ${wxWidgets_LIBRARIES}  cpprestsdk::cpprest)